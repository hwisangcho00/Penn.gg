"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
var axios_1 = require("axios");
var commander_1 = require("commander");
var tracer_1 = require("tracer");
var https_1 = require("https");
var fs_1 = require("fs");
var path_1 = require("path");
var zlib_1 = require("zlib");
var logger = (0, tracer_1.colorConsole)();
var downloadFile = function (url, filepath) { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        return [2 /*return*/, new Promise(function (resolve, reject) {
                https_1["default"].get(url, function (res) {
                    if (res.statusCode === 200) {
                        res.pipe(fs_1["default"].createWriteStream(filepath))
                            .on("error", reject)
                            .once("close", function () { return resolve(filepath); });
                    }
                    else {
                        // Consume response data to free up memory
                        res.resume();
                        reject(new Error("Request ".concat(url, " Failed With a Status Code: ").concat(res.statusCode)));
                    }
                });
            })];
    });
}); };
var downloadDirectory = function (URL, options, currentPath) {
    if (currentPath === void 0) { currentPath = ''; }
    return __awaiter(void 0, void 0, void 0, function () {
        var basePath, additionalPath, startingStr, removeCdrag, domain, jsonifiedString;
        var _a, _b, _c;
        return __generator(this, function (_d) {
            basePath = path_1["default"].resolve((_b = (_a = process.env.INIT_CWD) !== null && _a !== void 0 ? _a : process.cwd()) !== null && _b !== void 0 ? _b : "./", (_c = options.output) !== null && _c !== void 0 ? _c : "out");
            additionalPath = path_1["default"].resolve(basePath, currentPath);
            if (options.keepFiles === true)
                options.keepFiles = 'all';
            // Check if it's a community dragon link
            if (!URL.includes('communitydragon.org')) {
                logger.fatal('URL is not a valid CommunityDragon link.');
                return [2 /*return*/];
            }
            // Check if it's a directory
            if (!URL.endsWith('/')) {
                logger.fatal('URL is not a directory. URLs must end in a / to be a valid directory.');
                return [2 /*return*/];
            }
            startingStr = URL;
            // Strip the "https://"
            if (URL.startsWith('https://')) {
                startingStr = URL.split('//')[1];
            }
            removeCdrag = startingStr.split('/');
            domain = removeCdrag[0];
            removeCdrag.shift();
            // Re add the raw link with the json token
            removeCdrag.unshift(domain, 'json');
            jsonifiedString = "https://".concat(removeCdrag.join('/'));
            // Make a dir
            if (basePath === additionalPath) {
                if (!(0, fs_1.existsSync)(basePath)) {
                    (0, fs_1.mkdirSync)(basePath, { recursive: true });
                }
                else {
                    logger.info("The directory ".concat(basePath, " already exists. This can result in you writing files to a folder that already has other content in it. If that is intended, you are safe to ignore this warning."));
                }
            }
            // Download le files.
            axios_1["default"].get(jsonifiedString).then(function (_a) {
                var data = _a.data;
                return __awaiter(void 0, void 0, void 0, function () {
                    var file, content, files, index_1, i, file;
                    return __generator(this, function (_b) {
                        switch (_b.label) {
                            case 0:
                                logger.info("data length: ".concat(data.length));
                                // Read content of caching file
                                if (options.keepFiles === 'all' && (0, fs_1.existsSync)("".concat(additionalPath, "/.cddd"))) {
                                    file = (0, fs_1.openSync)("".concat(additionalPath, "/.cddd"), 'r');
                                    content = (0, fs_1.readFileSync)(file);
                                    (0, fs_1.closeSync)(file);
                                    files = JSON.parse((0, zlib_1.gunzipSync)(content).toString('utf-8'));
                                    index_1 = 0;
                                    files.forEach(function (file) {
                                        var fileName = file[0];
                                        var fileAge = file[1];
                                        for (var i = index_1; i < data.length; i++) {
                                            if (data[i].name === fileName) {
                                                index_1 = i;
                                                if (fileAge === Math.floor(new Date(data[i].mtime).getTime() / 1000)
                                                    && data[i].type !== 'directory' && (0, fs_1.existsSync)("".concat(basePath, "/").concat(currentPath).concat(data[i].name))) {
                                                    data[i].fetch = false;
                                                }
                                                break;
                                            }
                                        }
                                    });
                                }
                                i = 0;
                                _b.label = 1;
                            case 1:
                                if (!(i < data.length)) return [3 /*break*/, 6];
                                if (!(data[i].type === 'directory')) return [3 /*break*/, 2];
                                if (!options.recursive || data[i].fetch === false) {
                                    // Skip directory when recursive download is not enabled
                                    data[i] = [];
                                    return [3 /*break*/, 5];
                                }
                                try {
                                    // Create directory
                                    (0, fs_1.mkdirSync)("".concat(basePath, "/").concat(currentPath).concat(data[i].name));
                                    logger.info("created ".concat(basePath, "/").concat(currentPath).concat(data[i].name));
                                }
                                catch (e) {
                                    // Error incase directory exists
                                    logger.info("Directory ".concat(basePath, "/").concat(currentPath).concat(data[i].name, " exists already"));
                                }
                                // Download the files in the directory
                                downloadDirectory("".concat(URL).concat(data[i].name, "/"), options, currentPath + data[i].name + '/');
                                logger.info("Downloaded ".concat(currentPath + data[i].name + '/'));
                                data[i] = [];
                                return [3 /*break*/, 5];
                            case 2:
                                if (!(data[i].fetch !== false)) return [3 /*break*/, 4];
                                // Download the file
                                return [4 /*yield*/, downloadFile("".concat(URL).concat(data[i].name), "".concat(basePath, "/").concat(currentPath + data[i].name))];
                            case 3:
                                // Download the file
                                _b.sent();
                                logger.info("Downloaded ".concat(basePath, "/").concat(currentPath + data[i].name));
                                _b.label = 4;
                            case 4:
                                data[i] = [data[i].name, Math.floor(new Date(data[i].mtime).getTime() / 1000)];
                                _b.label = 5;
                            case 5:
                                i++;
                                return [3 /*break*/, 1];
                            case 6:
                                // write compressed caching file to folder
                                data = data.filter(function (n) { return n.length; });
                                if (data.length > 0 && options.keepFiles !== 'nothing') {
                                    file = (0, fs_1.openSync)("".concat(additionalPath, "/.cddd"), 'w+');
                                    (0, fs_1.writeFileSync)(file, (0, zlib_1.gzipSync)(JSON.stringify(data)));
                                    (0, fs_1.closeSync)(file);
                                }
                                return [2 /*return*/];
                        }
                    });
                });
            });
            return [2 /*return*/];
        });
    });
};
var program = (new commander_1.Command())
    .argument('<URL>', 'URL starting with https://')
    .option('-o, --output <output>', 'Output directory location. Default is ./out')
    .option('-r, --recursive', 'Recursively download directory and files')
    .addOption(new commander_1.Option('-k, --keep-files [mode]', 'Keep files if they already exist in the output directory').choices(['all', 'replace', 'nothing'])["default"]("all"))
    .action(function (url, options) { return downloadDirectory(url, options); })
    .version('1.0.0');
// Parse the CLI
program.parse();
